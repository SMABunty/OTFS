% Parameters
M = 64; 
N = 30;
df = 15e3;
fc = 5e9;
padLen = 10;
padType = 'ZP';
numBits = M * N * 2; % Assuming QPSK (2 bits per symbol)

% Pilot symbol configuration
pilotBin = floor(N/2) + 1;
Pdd = zeros(M, N); 
Pdd(1, pilotBin) = exp(1i * (3 * pi) / 4);

% Path configuration
chanParams.pathDelays = [0, 5, 8]; % Path delays in samples
chanParams.pathGains = [1, 0.7, 0.5]; % Path gains (linear scale)
chanParams.pathDopplers = [0, -3, 5]; % Doppler shifts in Hz
numPaths = length(chanParams.pathDelays); % Number of multipaths

% Sampling frequency at the Nyquist rate
fsamp = 2 * M * df;

% Effective number of samples per OTFS subsymbol
if strcmp(padType, 'ZP') || strcmp(padType, 'CP')
    Meff = M + padLen; % Number of samples per OTFS subsymbol
    numSamps = Meff * N; % Total number of samples per OTFS symbol
    T = ((M + padLen) / (M * df)); % Symbol time (seconds)
else
    Meff = M; % Number of samples per OTFS subsymbol
    numSamps = M * N + padLen; % Total number of samples per OTFS symbol
    T = 1 / df; % Symbol time (seconds)
end

% SNR range for simulation
SNRdB_range = 0:5:40; % SNR values in dB   { 0 to 40 with a step of 5 }
BER = zeros(size(SNRdB_range)); % Store BER results

% Run simulation for each SNR value
for snrIdx = 1:length(SNRdB_range)
    SNRdB = SNRdB_range(snrIdx);
    totalBitErrors = 0;
    totalBits = 0;

    % Monte Carlo simulations (repeat to get a better average BER)
    numSimulations = 10; % Number of OTFS frames simulated per SNR
    for sim = 1:numSimulations
        % Generate Random Data Bits (QPSK)
        txBits = randi([0 1], numBits, 1); % Random bit sequence

        % Map bits to QPSK symbols
        txSymbols = 2 * txBits(1:2:end) - 1 + 1i * (2 * txBits(2:2:end) - 1); % QPSK mapping
        txSymbols = reshape(txSymbols, M, N); % Reshape to MxN matrix

        % Modulation (OTFS Modulation)
        txOut = simpleOTFSmod(txSymbols, padLen, padType);

        % Send the OTFS modulated signal through the Doppler channel
        dopplerOut = customDopplerChannel(txOut, fsamp, chanParams);

        % Add noise (AWGN)
        rxSNR = 10^(SNRdB/10);
        noisePower = (1 / sqrt(rxSNR)) * sqrt(mean(abs(dopplerOut).^2));
        rxSignal = dopplerOut + noisePower * (randn(size(dopplerOut)) + 1i * randn(size(dopplerOut))) / sqrt(2);

        % Extract valid range of samples
        numSamps = min(length(rxSignal), M * N); % Ensure numSamps does not exceed length of rxSignal
        rxIn = rxSignal(1:numSamps); % Extract the valid range of samples

        % OTFS Demodulation
        Ydd = simpleOTFSdemod(rxIn, M, N, padLen, padType);

        % Decision Making (QPSK detection)
        detectedSymbols = sign(real(Ydd)) + 1i * sign(imag(Ydd)); % Detect QPSK symbols
        detectedBits = zeros(numBits, 1);
        detectedBits(1:2:end) = real(detectedSymbols) > 0; % Real part
        detectedBits(2:2:end) = imag(detectedSymbols) > 0; % Imaginary part

        % Calculate Bit Errors
        bitErrors = sum(txBits ~= detectedBits);
        totalBitErrors = totalBitErrors + bitErrors;
        totalBits = totalBits + numBits;
    end

    % Calculate BER for this SNR value
    BER(snrIdx) = totalBitErrors / totalBits;
    fprintf('SNR: %d dB, BER: %f\n', SNRdB, BER(snrIdx));
end

% Plot BER vs SNR
figure;
semilogy(SNRdB_range, BER, '-o');
title('BER vs SNR for OTFS System');
xlabel('SNR (dB)');
ylabel('Bit Error Rate (BER)');
grid on;

% OTFS Modulation Function
function txOut = simpleOTFSmod(Pdd, padLen, padType)
    % Define basic modulation parameters
    [M, N] = size(Pdd); % Get dimensions of the input grid
    
    % Perform SFFT to move to the time-frequency domain
    X_tf = ifft(ifft(Pdd, [], 1), [], 2); % Apply 2D IFFT
    
    % Reshape the data into a single vector for transmission
    txSignal = reshape(X_tf, [], 1);
    
    % Padding: Zero padding (ZP) or Cyclic prefix (CP)
    if strcmp(padType, 'ZP')
        txSignal = [txSignal; zeros(padLen, 1)];
    elseif strcmp(padType, 'CP')
        txSignal = [txSignal(end - padLen + 1:end); txSignal];
    end
    
    txOut = txSignal; % Output the modulated signal
end

% OTFS Demodulation Function
function Ydd = simpleOTFSdemod(rxSignal, M, N, padLen, padType)
    % Adjust the received signal length for padding
    if strcmp(padType, 'ZP') || strcmp(padType, 'CP')
        rxSignal = rxSignal(1:end-padLen); % Remove padding if needed
    end
    
    % Reshape the received signal into an MxN matrix
    if length(rxSignal) < M * N
        % If the length is shorter than expected, zero pad
        rxSignal = [rxSignal; zeros(M * N - length(rxSignal), 1)];
    elseif length(rxSignal) > M * N
        % If the length is longer, truncate the signal
        rxSignal = rxSignal(1:M * N);
    end

    rxSignal = reshape(rxSignal, M, []); % Automatically infer N with []
    
    % Perform SFFT (2D FFT) to move from the time-frequency domain to DD domain
    Ydd = fft(fft(rxSignal, [], 2), [], 1); % 2D FFT
end


% Doppler Channel Function
function rxOut = customDopplerChannel(txSignal, fs, chanParams)
    % Unpack channel parameters
    pathDelays = chanParams.pathDelays;
    pathGains = chanParams.pathGains;
    pathDopplerFreqs = chanParams.pathDopplers;
    
    numPaths = length(pathDelays);
    numSamples = length(txSignal);
    t = (0:numSamples-1)' / fs; % Time vector

    % Initialize received signal
    rxOut = zeros(size(txSignal));
    
    % Loop over each path and apply delay, Doppler shift, and gain
    for pathIdx = 1:numPaths
        % Apply Doppler shift
        dopplerShift = exp(1i * 2 * pi * pathDopplerFreqs(pathIdx) * t);
        
        % Apply delay by shifting the signal
        delaySamps = round(pathDelays(pathIdx));
        delayedSignal = [zeros(delaySamps, 1); txSignal(1:end-delaySamps)];
        
        % Apply path gain
        gainSignal = pathGains(pathIdx) * delayedSignal;
        
        % Add the Doppler-shifted and delayed signal to the output
        rxOut = rxOut + gainSignal .* dopplerShift;
    end
end


% Doppler Channel Visualization

% Plotting Transmitted and Received Waveforms
figure;
subplot(3, 1, 1);
plot(real(txOut), 'b');
hold on;
plot(imag(txOut), 'r');
title('Transmitted OTFS Modulated Waveform');
xlabel('Sample Index');
ylabel('Amplitude');
legend('Real Part', 'Imaginary Part');
grid on;

subplot(3, 1, 2);
plot(real(dopplerOut), 'b');
hold on;
plot(imag(dopplerOut), 'r');
title('Received OTFS Signal after Doppler Channel');
xlabel('Sample Index');
ylabel('Amplitude');
legend('Real Part', 'Imaginary Part');
grid on;

% Doppler Shift Plot for each Path
t = (0:length(txOut)-1)' / fsamp; % Time vector
numPaths = length(chanParams.pathDopplers);

subplot(3, 1, 3);
for i = 1:numPaths
    dopplerShift = chanParams.pathDopplers(i);
    plot(t, dopplerShift * ones(size(t)), 'DisplayName', ['Path ' num2str(i)]);
    hold on;
end
title('Doppler Shift for Each Path');
xlabel('Time (s)');
ylabel('Doppler Shift (Hz)');
legend show;
grid on;

% Spectrogram to visualize Doppler shift effect
figure;
subplot(2, 1, 1);
spectrogram(txOut, 128, 120, 128, fsamp, 'yaxis');
title('Spectrogram of Transmitted Signal');
subplot(2, 1, 2);
spectrogram(dopplerOut, 128, 120, 128, fsamp, 'yaxis');
title('Spectrogram of Received Signal after Doppler Channel');



fsamp = M * df;

% Time vector
t = (0:1/fsamp:(M*N-1)/fsamp);

% Initialize channel impulse response (time domain)
H_time = zeros(1, length(t));

% Construct channel impulse response from paths
for i = 1:numPaths
    % Apply delay, gain, and Doppler effect to each path
    delaySamples = round(chanParams.pathDelays(i));  % Ensure delays are integers (samples)
    dopplerShift = chanParams.pathDopplers(i);
    
    % Create a delayed and Doppler-shifted impulse response for each path
    impulse = zeros(1, length(t));   % Initialize an impulse signal
    impulse(1) = 1;                  % Set the impulse at time zero
    delayedImpulse = circshift(impulse, [0 delaySamples]); % Apply integer sample shift for delay
    
    % Doppler shift is applied as a phase rotation over time
    H_time = H_time + chanParams.pathGains(i) * ...
        delayedImpulse .* exp(1j * 2 * pi * dopplerShift * t);
end

% Plot the channel impulse response (time domain)
figure;
subplot(2, 1, 1);
plot(t, real(H_time), 'b');
hold on;
plot(t, imag(H_time), 'r');
title('Channel Impulse Response (Time Domain)');
xlabel('Time (s)');
ylabel('Amplitude');
legend('Real Part', 'Imaginary Part');
grid on;

% Compute and plot frequency response (Frequency Domain)
H_freq = fft(H_time);
f = (0:length(H_freq)-1) * (fsamp/length(H_freq)); % Frequency axis

subplot(2, 1, 2);
plot(f, abs(H_freq));
title('Channel Frequency Response (Frequency Domain)');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
grid on;



% Initialize DD domain channel response matrix (M Doppler x N Delay)
H_dd = zeros(M, N);

% Loop over each path and add its contribution to the DD domain
for i = 1:length(chanParams.pathDelays)
    % Delay bin index
    delayIdx = mod(chanParams.pathDelays(i), N) + 1; % Ensure delay index is within N bins
    
    % Doppler bin index
    dopplerShift = chanParams.pathDopplers(i);
    dopplerIdx = mod(round(dopplerShift / df * M), M) + 1; % Ensure Doppler index is within M bins
    
    % Add the path gain to the corresponding DD domain bin
    H_dd(dopplerIdx, delayIdx) = H_dd(dopplerIdx, delayIdx) + chanParams.pathGains(i);
end

% Plot the Delay-Doppler domain response
figure;
imagesc(0:N-1, -M/2:M/2-1, abs(fftshift(H_dd, 1))); % Use fftshift to center Doppler axis
title('Channel Response in Delay-Doppler (DD) Domain');
xlabel('Delay (bins)');
ylabel('Doppler (bins)');
colorbar;
